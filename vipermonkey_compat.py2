import json
import logging
import os
import subprocess
import sys

from cStringIO import StringIO

from assemblyline_v4_p2compat.common import log as al_log

from vipermonkey.vmonkey import process_file

LOG_LEVEL = logging.getLevelName(os.environ.get("LOG_LEVEL", "INFO"))

def check_output(*popenargs, **kwargs):

    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, stderr=subprocess.PIPE, *popenargs, **kwargs)
    proc_output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise subprocess.CalledProcessError(retcode, cmd, output=proc_output)
    return proc_output


subprocess.check_output = check_output


if __name__ == "__main__":
    al_log.init_logging('vipermonkey', log_level=LOG_LEVEL)
    log = logging.getLogger("assemblyline.service.vipermonkey.py2")
    log.debug("ViperMonkey Python2 compat module loaded and ready!")
    # noinspection PyBroadException
    try:
        if len(sys.argv) < 2:
            log.error("No file to scan was provided...")
            exit(1)

        file_to_scan = sys.argv[1]

        if os.path.exists(file_to_scan):
            log.debug('Parsing file {file_to_scan} with ViperMonkey'.format(file_to_scan=file_to_scan))

            # hijack stdout and stderr
            old_stdout = sys.stdout
            old_stderr = sys.stderr
            sys.stdout = my_stdout = StringIO()
            sys.stderr = my_stderr = StringIO()

            vmonkey_values = process_file(None, file_to_scan, None)

            # Release stdout and stderr
            sys.stdout = old_stdout
            sys.stderr = old_stderr

            # Get stdout and stderr values
            my_stdout.flush()
            my_stdout.seek(0)
            stdout = my_stdout.read()
            my_stderr.flush()
            my_stderr.seek(0)
            stderr = my_stderr.read()

            vmonkey_error = None
            if vmonkey_values is None:
                vmonkey_values = ([], [], [])
                last_3_lines = list(stdout.splitlines())[-3:]
                if last_3_lines[1].strip() == "^":
                    vmonkey_error = "\\n".join(last_3_lines)
                    log.error("{file_to_scan}: {msg}".format(file_to_scan=file_to_scan, msg=last_3_lines))

            output = dict(
                vmonkey_values=dict(
                    actions=list(vmonkey_values[0]),
                    external_funcs=list(vmonkey_values[1]),
                    tmp_iocs=list(vmonkey_values[2])
                ),
                vmonkey_err=vmonkey_error,
                stdout=stdout,
                stderr=stderr
            )

            log.debug('Scan completed. Writing results to stdout')
            try:
                print(json.dumps(output))
            except ValueError:
                print(json.dumps(output, ensure_ascii=False))

        else:
            log.error("File to scan not found.")
            exit(1)
    except Exception as e:
        log.exception("Unknown error caught while executing vipermonkey: {e}".format(e=str(e)))
        exit(1)
